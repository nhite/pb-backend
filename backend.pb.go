// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend.proto

/*
Package pbbackend is a generated protocol buffer package.

It is generated from these files:
	backend.proto

It has these top-level messages:
	Pagination
	Elements
	Element
	ElementID
	Error
*/
package pbbackend

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Pagination struct {
	NumberOfItem int32 `protobuf:"varint,1,opt,name=NumberOfItem" json:"NumberOfItem,omitempty"`
}

func (m *Pagination) Reset()                    { *m = Pagination{} }
func (m *Pagination) String() string            { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()               {}
func (*Pagination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Pagination) GetNumberOfItem() int32 {
	if m != nil {
		return m.NumberOfItem
	}
	return 0
}

type Elements struct {
	Error   *Error     `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Element []*Element `protobuf:"bytes,2,rep,name=element" json:"element,omitempty"`
}

func (m *Elements) Reset()                    { *m = Elements{} }
func (m *Elements) String() string            { return proto.CompactTextString(m) }
func (*Elements) ProtoMessage()               {}
func (*Elements) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Elements) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Elements) GetElement() []*Element {
	if m != nil {
		return m.Element
	}
	return nil
}

type Element struct {
	Error   *Error     `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ID      *ElementID `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	Comment string     `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	Body    []byte     `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Owner   string     `protobuf:"bytes,6,opt,name=Owner" json:"Owner,omitempty"`
}

func (m *Element) Reset()                    { *m = Element{} }
func (m *Element) String() string            { return proto.CompactTextString(m) }
func (*Element) ProtoMessage()               {}
func (*Element) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Element) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Element) GetID() *ElementID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Element) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Element) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Element) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type ElementID struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *ElementID) Reset()                    { *m = ElementID{} }
func (m *ElementID) String() string            { return proto.CompactTextString(m) }
func (*ElementID) ProtoMessage()               {}
func (*ElementID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ElementID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Error struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Error) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*Pagination)(nil), "pbbackend.Pagination")
	proto.RegisterType((*Elements)(nil), "pbbackend.Elements")
	proto.RegisterType((*Element)(nil), "pbbackend.Element")
	proto.RegisterType((*ElementID)(nil), "pbbackend.ElementID")
	proto.RegisterType((*Error)(nil), "pbbackend.Error")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Backend service

type BackendClient interface {
	Store(ctx context.Context, opts ...grpc.CallOption) (Backend_StoreClient, error)
	Fetch(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (Backend_FetchClient, error)
	List(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Elements, error)
}

type backendClient struct {
	cc *grpc.ClientConn
}

func NewBackendClient(cc *grpc.ClientConn) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) Store(ctx context.Context, opts ...grpc.CallOption) (Backend_StoreClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Backend_serviceDesc.Streams[0], c.cc, "/pbbackend.Backend/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendStoreClient{stream}
	return x, nil
}

type Backend_StoreClient interface {
	Send(*Element) error
	CloseAndRecv() (*Error, error)
	grpc.ClientStream
}

type backendStoreClient struct {
	grpc.ClientStream
}

func (x *backendStoreClient) Send(m *Element) error {
	return x.ClientStream.SendMsg(m)
}

func (x *backendStoreClient) CloseAndRecv() (*Error, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Error)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backendClient) Fetch(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (Backend_FetchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Backend_serviceDesc.Streams[1], c.cc, "/pbbackend.Backend/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Backend_FetchClient interface {
	Recv() (*Element, error)
	grpc.ClientStream
}

type backendFetchClient struct {
	grpc.ClientStream
}

func (x *backendFetchClient) Recv() (*Element, error) {
	m := new(Element)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backendClient) List(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Elements, error) {
	out := new(Elements)
	err := grpc.Invoke(ctx, "/pbbackend.Backend/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Backend service

type BackendServer interface {
	Store(Backend_StoreServer) error
	Fetch(*ElementID, Backend_FetchServer) error
	List(context.Context, *Pagination) (*Elements, error)
}

func RegisterBackendServer(s *grpc.Server, srv BackendServer) {
	s.RegisterService(&_Backend_serviceDesc, srv)
}

func _Backend_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BackendServer).Store(&backendStoreServer{stream})
}

type Backend_StoreServer interface {
	SendAndClose(*Error) error
	Recv() (*Element, error)
	grpc.ServerStream
}

type backendStoreServer struct {
	grpc.ServerStream
}

func (x *backendStoreServer) SendAndClose(m *Error) error {
	return x.ServerStream.SendMsg(m)
}

func (x *backendStoreServer) Recv() (*Element, error) {
	m := new(Element)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Backend_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ElementID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServer).Fetch(m, &backendFetchServer{stream})
}

type Backend_FetchServer interface {
	Send(*Element) error
	grpc.ServerStream
}

type backendFetchServer struct {
	grpc.ServerStream
}

func (x *backendFetchServer) Send(m *Element) error {
	return x.ServerStream.SendMsg(m)
}

func _Backend_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbackend.Backend/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).List(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

var _Backend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbbackend.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Backend_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _Backend_Store_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Fetch",
			Handler:       _Backend_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend.proto",
}

func init() { proto.RegisterFile("backend.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xd1, 0x4a, 0xeb, 0x40,
	0x10, 0xed, 0xa6, 0xdd, 0xe6, 0x76, 0xda, 0x2b, 0x65, 0xac, 0xb0, 0xd6, 0x97, 0xb0, 0x88, 0xe4,
	0x41, 0x4a, 0xad, 0xfa, 0x03, 0x92, 0x0a, 0x01, 0xb1, 0xb2, 0xfe, 0x80, 0x49, 0xba, 0x6a, 0xd0,
	0x64, 0xcb, 0x66, 0x45, 0xfc, 0x16, 0xbf, 0xc0, 0xbf, 0x94, 0x6e, 0xd2, 0x5a, 0x49, 0x1e, 0x7c,
	0x9b, 0x39, 0xe7, 0xcc, 0x99, 0x33, 0xc9, 0xc2, 0xff, 0x38, 0x4a, 0x5e, 0x64, 0xbe, 0x9c, 0xac,
	0xb4, 0x32, 0x0a, 0x7b, 0xab, 0xb8, 0x02, 0xf8, 0x14, 0xe0, 0x2e, 0x7a, 0x4a, 0xf3, 0xc8, 0xa4,
	0x2a, 0x47, 0x0e, 0x83, 0xdb, 0xb7, 0x2c, 0x96, 0x7a, 0xf1, 0x18, 0x1a, 0x99, 0x31, 0xe2, 0x11,
	0x9f, 0x8a, 0x5f, 0x18, 0x7f, 0x80, 0x7f, 0xf3, 0x57, 0x99, 0xc9, 0xdc, 0x14, 0x78, 0x02, 0x54,
	0x6a, 0xad, 0xb4, 0x15, 0xf6, 0x67, 0xc3, 0xc9, 0xd6, 0x78, 0x32, 0x5f, 0xe3, 0xa2, 0xa4, 0xf1,
	0x14, 0x5c, 0x59, 0xce, 0x30, 0xc7, 0x6b, 0xfb, 0xfd, 0x19, 0xee, 0x2a, 0x4b, 0x46, 0x6c, 0x24,
	0xfc, 0x93, 0x80, 0x5b, 0x81, 0x7f, 0xde, 0x70, 0x0c, 0x4e, 0x18, 0x30, 0xc7, 0x8a, 0x46, 0x75,
	0xf3, 0x30, 0x10, 0x4e, 0x18, 0x20, 0x03, 0x37, 0x51, 0x99, 0xcd, 0xd1, 0xf6, 0x88, 0xdf, 0x13,
	0x9b, 0x16, 0x11, 0x3a, 0xb1, 0x5a, 0x7e, 0x30, 0xea, 0x11, 0x7f, 0x20, 0x6c, 0x8d, 0x23, 0xa0,
	0x8b, 0xf7, 0x5c, 0x6a, 0xd6, 0xb5, 0xda, 0xb2, 0xe1, 0x47, 0xd0, 0xdb, 0x9a, 0xe2, 0x9e, 0x5d,
	0x4b, 0x2c, 0xef, 0x84, 0x01, 0x3f, 0x04, 0x6a, 0x63, 0xe1, 0x10, 0xda, 0x52, 0xeb, 0x8a, 0x59,
	0x97, 0xb3, 0x2f, 0x02, 0xee, 0x55, 0x99, 0x0a, 0xcf, 0x80, 0xde, 0x1b, 0xa5, 0x25, 0x36, 0x7c,
	0x87, 0x71, 0xed, 0x46, 0xde, 0xf2, 0x09, 0x5e, 0x02, 0xbd, 0x96, 0x26, 0x79, 0xc6, 0xc6, 0xeb,
	0xc6, 0x0d, 0x46, 0xbc, 0x35, 0x25, 0x78, 0x01, 0x9d, 0x9b, 0xb4, 0x30, 0x78, 0xb0, 0xc3, 0xff,
	0xfc, 0xf0, 0xf1, 0x7e, 0x7d, 0xac, 0xe0, 0xad, 0xb8, 0x6b, 0xdf, 0xc9, 0xf9, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x85, 0x22, 0xdb, 0x98, 0x38, 0x02, 0x00, 0x00,
}
